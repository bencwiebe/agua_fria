# -*- coding: utf-8 -*-
"""Copy of sample_thermal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OVFtL4socjraQE3-7Hp423ACGPYQ3XMc
"""

"""Things to watch out for when looking over code in final revisions (or before):
- when looping through dates,blocks,plots and then subtracting the mean of the date_block, make sure that the mean represents the entire date_block (or date) and not just what has already gone through the loop
- Make sure that a percentile, mean, or median is being taken of temperature values OF EACH FILE, and then that those values are being processed, instead of collecting all pixel values from a certain category first and taking one statistic (mean, median, percentile) of that big collection
- are you excluding any data (or is an exclusion from earlier in the script still applying?
- any ways to encapsulate code in functions that adds to clarity (in a similar way as data_dict is created, where I know exactly what is involved in it and can do quality / consistency control a lot easier)... such as encapsulating warm_cool_dict, or histogram data, etc.
"""



import pandas as pd
import os
import numpy as np
from PIL import Image
from numpy import asarray
from glob import glob
# import earthpy as et
# import earthpy.spatial as es
# import earthpy.plot as ep
# import rasterio as rio
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.colors import ListedColormap
# import plotly.graph_objects as go
# from plantcv import plantcv as pcv
from scipy import stats
from scipy.stats import kurtosis
from scipy.stats import skew

np.seterr(divide='ignore', invalid='ignore')

#reads through files in directory (dir), outputs 1 list (of names) and 2 dictionaries with file numbers as keys, one for rgb np.arrays and
#another with thermal np.arrays

def create_dict(dir): 

  #define dicts and lists for later
  rgb_dict = {}
  thermal_dict = {}
  name_list = []

  #iterate through files in a given folder (dir), extract rgb data from the jpg files, add them to rgb_dict with the number from
  #the file name as the key and the numpy ndarray as the value. Also adds name to the list name_list

  for file in os.listdir(dir):

    name = file[:-4]

    if file.endswith(".jpg"):

      image = Image.open(dir + file) #read jpg with PIL Image library
      data = np.array(image) #converts jpg to np.array

      rgb_dict[name] = data #write to dictionary

      name_list.append(name)

  #iterate through files in dir, read thermal csv files into pd.DataFrames, convert to numpy arrays, save to thermal_dict with name
  #as key

  for file in os.listdir(dir):
    name = file[:-4]
    if file.endswith(".csv"):

      read = pd.read_csv(dir + file, skiprows = 10)

      num_cols = len(read.axes[1])

      thermal = pd.read_csv(dir + file, skiprows = 10, usecols = range(1,num_cols), header = None)
      
      thermal_np = pd.DataFrame(thermal).to_numpy()
      thermal_dict[name] = thermal_np #write to dictionary
  
  return(rgb_dict, thermal_dict, name_list)

#outputs dictionary of files (keys) and thermal values (values) for each terminal directory

def extract_leaf_thermal(rgb_dict, thermal_dict):

  # Create masked image from a color image based RGB color-space and threshold values. 
  # for lower and upper_thresh list as: thresh = [red_thresh, green_thresh, blue_thresh]

  #initiate list to contain all thermal pixel values from trees within the population (mask applied)
  thermal_pixel_value_dict = {}

  #isolate file numbers, create list
  name_list = []
  for key in rgb_dict.keys():
    name_list.append(key)
  
  index_list = []

  #initiate list of images
  pic_list = []

  #iterate through each image pair, create and apply mask to thermal image, find desired percentile value, append that
  #value to temp_percentile_value list
  for name in name_list:
    
    #read in rgb and thermal data from dictionaries for each image
    rgb = rgb_dict[name]
    thermal = thermal_dict[name]

    #define the bands

    r =rgb[...,0]
    g = rgb[...,1]
    b = rgb[...,2]

    #mask based on survey by [Hamuda, Esmael; Glavin, Martin; Jones, Edward] --  Normalized Difference Index -- (G âˆ’ R)/(G + R)
    mask = (g < r)
    #also get rid of shadows -- anything with a green pixel value of less than 100
    mask2 = g < 100
    mask3 = (g > 150) & (r > 150) & (b > 150)

    #get masked rgb by making copy, using BOTH filters
    masked_rgb = rgb.copy()
    masked_rgb[mask] = 0
    masked_rgb[mask2] = 0
    masked_rgb[mask3] = 0

    pic_list.append(rgb)
    pic_list.append(masked_rgb)

    #get masked thermal image by making copy, applying BOTH filters
    masked_therm = thermal.copy()
    masked_therm[mask] = 0
    masked_therm[mask2] = 0
    masked_therm[mask3] = 0

    #convert the 2d array to a 1d array... esentially a list of values
    thermal1d = masked_therm.ravel()

    #exclude the "masked" pixels, which have values of 0
    thermal1d = thermal1d[thermal1d != 0]

    if len(thermal1d) > 0:
      thermal_pixel_value_dict[name] = thermal1d
  
  return(thermal_pixel_value_dict, pic_list)

def create_df_with_adaptation(data_dict, image_percentile):

  rows = []
  for date in data_dict.keys():
    for block in data_dict[date].keys():
      for plot in data_dict[date][block].keys():
        for file1 in data_dict[date][block][plot].keys():
          value_array = data_dict[date][block][plot][file1]
          row = [date, block, plot, file1, value_array]
          rows.append(row)
  df = pd.DataFrame(rows, columns = ["date_col", "block", "plot", "file", "value_array"])

  df['percentile_temp'] = df.apply(lambda row: np.percentile(row.value_array, image_percentile), axis=1)

  
  nums = sorted(df.date_col.unique())
  conditions1 = [
    (df.date_col == nums[0]),
    (df.date_col == nums[1]),
    (df.date_col == nums[2]),
    (df.date_col == nums[3]),
    (df.date_col == nums[4]),
    (df.date_col == nums[5]),
    (df.date_col == nums[6]),
    (df.date_col == nums[7]),
    (df.date_col == nums[8])
  ]

  values = [1,2,3,4,5,6,7,8,9]
  df["day_number"] = np.select(conditions1, values)

  df.loc[df["plot"] == "KKH", "adaptation"] = "cool"
  df.loc[df["plot"] == "NRV", "adaptation"] = "warm"
  df.loc[df["plot"] == "CCR", "adaptation"] = "warm"
  df.loc[df["plot"] == "CLF", "adaptation"] = "cool"
  df.loc[df["plot"] == "JLA", "adaptation"] = "cool"
  df.loc[df["plot"] == "LBW", "adaptation"] = "warm"

  df['indentifier'] = df.apply(lambda row: str(row.block)+str(adaptation), axis=1)

  df = df.drop(["value_array"], axis = 1)

  return df

#takes data_dict and the desired percentile to be analyzed, outputs a series of timeseries bar charts showing population leaf temperatures from block2 immediately next to block3,
#separated by population.

def plot_chart_by_pop(data_dict, percentile):
  rows = []
  for date in data_dict.keys():
    for block in data_dict[date].keys():
      for plot in data_dict[date][block].keys():
        for file1 in data_dict[date][block][plot].keys():
          value_array = data_dict[date][block][plot][file1]
          row = [date, block, plot, file1, value_array]
          rows.append(row)
  big_df = pd.DataFrame(rows, columns = ["date_col", "block", "plot", "file", "value_array"])
  big_df['percentile_temp'] = big_df.apply(lambda row: np.percentile(row.value_array, percentile), axis=1)
  big_df = big_df[big_df["plot"] != "LBW"] #LBW has some issues... shade, sometimes includes invasive plant that seems to be significantly cooler
  big_df["date_col"] = pd.to_datetime(big_df["date_col"], yearfirst = True)

  nums = sorted(big_df.date_col.unique())
  conditions1 = [
    (big_df.date_col == nums[0]),
    (big_df.date_col == nums[1]),
    (big_df.date_col == nums[2]),
    (big_df.date_col == nums[3]),
    (big_df.date_col == nums[4]),
    (big_df.date_col == nums[5]),
    (big_df.date_col == nums[6]),
    (big_df.date_col == nums[7]),
    (big_df.date_col == nums[8])
  ]

  values = [1,2,3,4,5,6,7,8,9]
  big_df["Day"] = np.select(conditions1, values)

  big_df.index = big_df.Day

  block2 = big_df[big_df["block"] == "block2"]
  block3 = big_df[big_df["block"] == "block3"]

  ccr2 = block2[block2["plot"] == "CCR"]
  clf2 = block2[block2["plot"] == "CLF"]
  jla2 = block2[block2["plot"] == "JLA"]
  kkh2 = block2[block2["plot"] == "KKH"]
  lbw2 = block2[block2["plot"] == "LBW"]
  nrv2 = block2[block2["plot"] == "NRV"]

  ccr3 = block3[block3["plot"] == "CCR"]
  clf3 = block3[block3["plot"] == "CLF"]
  jla3 = block3[block3["plot"] == "JLA"]
  kkh3 = block3[block3["plot"] == "KKH"]
  lbw3 = block3[block3["plot"] == "LBW"]
  nrv3 = block3[block3["plot"] == "NRV"]


  days = [i for i in block2.Day.unique()]
  days = np.sort(days)

  block2_mean = block2.groupby(block2.Day)['percentile_temp'].mean()
  block3_mean = block3.groupby(block3.Day)['percentile_temp'].mean()

  ccr2_mean = ccr2.groupby(ccr2.Day)['percentile_temp'].mean()
  clf2_mean = clf2.groupby(clf2.Day)['percentile_temp'].mean()
  jla2_mean = jla2.groupby(jla2.Day)['percentile_temp'].mean()
  lbw2_mean = lbw2.groupby(lbw2.Day)['percentile_temp'].mean()
  nrv2_mean = nrv2.groupby(nrv2.Day)['percentile_temp'].mean()
  kkh2_mean = kkh2.groupby(kkh2.Day)['percentile_temp'].mean()

  ccr2_std = ccr2.groupby(ccr2.Day)['percentile_temp'].std()
  clf2_std = clf2.groupby(clf2.Day)['percentile_temp'].std()
  jla2_std = jla2.groupby(jla2.Day)['percentile_temp'].std()
  lbw2_std = lbw2.groupby(lbw2.Day)['percentile_temp'].std()
  nrv2_std = nrv2.groupby(nrv2.Day)['percentile_temp'].std()
  kkh2_std = kkh2.groupby(kkh2.Day)['percentile_temp'].std()

  ccr3_mean = ccr3.groupby(ccr3.Day)['percentile_temp'].mean()
  clf3_mean = clf3.groupby(clf3.Day)['percentile_temp'].mean()
  jla3_mean = jla3.groupby(jla3.Day)['percentile_temp'].mean()
  lbw3_mean = lbw3.groupby(lbw3.Day)['percentile_temp'].mean()
  nrv3_mean = nrv3.groupby(nrv3.Day)['percentile_temp'].mean()
  kkh3_mean = kkh3.groupby(kkh3.Day)['percentile_temp'].mean()

  ccr3_std = ccr3.groupby(ccr3.Day)['percentile_temp'].std()
  clf3_std = clf3.groupby(clf3.Day)['percentile_temp'].std()
  jla3_std = jla3.groupby(jla3.Day)['percentile_temp'].std()
  lbw3_std = lbw3.groupby(lbw3.Day)['percentile_temp'].std()
  nrv3_std = nrv3.groupby(nrv3.Day)['percentile_temp'].std()
  kkh3_std = kkh3.groupby(kkh3.Day)['percentile_temp'].std()

  x = np.arange(len(days))  # the label locations
  width = 0.1  # the width of the bars

  fig, ax = plt.subplots(4)
  fig.set_size_inches(18.5, 30)
  fig.suptitle("Variations in tree canopy temperature from block mean for each sampling date")


  ccr2_diff = (ccr2_mean - block2_mean)
  clf2_diff = (clf2_mean - block2_mean)
  jla2_diff = (jla2_mean - block2_mean)
  lbw2_diff = (lbw2_mean - block2_mean)
  nrv2_diff = (nrv2_mean - block2_mean)
  kkh2_diff = (kkh2_mean - block2_mean)
  ccr2_diff.dropna(axis = 0, inplace = True)
  clf2_diff.dropna(axis = 0, inplace = True)
  jla2_diff.dropna(axis = 0, inplace = True)
  lbw2_diff.dropna(axis = 0, inplace = True)
  nrv2_diff.dropna(axis = 0, inplace = True)
  kkh2_diff.dropna(axis = 0, inplace = True)

  ccr3_diff = (ccr3_mean - block3_mean)
  clf3_diff = (clf3_mean - block3_mean)
  jla3_diff = (jla3_mean - block3_mean)
  lbw3_diff = (lbw3_mean - block3_mean)
  nrv3_diff = (nrv3_mean - block3_mean)
  kkh3_diff = (kkh3_mean - block3_mean)
  ccr3_diff.dropna(axis = 0, inplace = True)
  clf3_diff.dropna(axis = 0, inplace = True)
  jla3_diff.dropna(axis = 0, inplace = True)
  lbw3_diff.dropna(axis = 0, inplace = True)
  nrv3_diff.dropna(axis = 0, inplace = True)
  kkh3_diff.dropna(axis = 0, inplace = True)

  ax[0].bar(ccr2_mean.index - 0.1, ccr2_diff, width, label='block2', yerr = ccr2_std, color = "red"   )
  ax[0].bar(ccr3_mean.index + 0.1, ccr3_diff, width, label='block3', yerr = ccr3_std, color = "green")
  ax[0].set_ylim(-5,5)
  ax[0].set_title("CCR")
  ax[0].legend()
  ax[0].set_ylabel("degrees C")
  ax[0].set_xlabel("Date")

  ax[1].bar(clf2_mean.index - 0.1, clf2_diff, width, label='block2', yerr = clf2_std, color = "red"   )
  ax[1].bar(clf3_mean.index + 0.1, clf3_diff, width, label='block3', yerr = clf3_std, color = "green")
  ax[1].set_ylim(-5,5)
  ax[1].set_title("CLF")
  ax[1].legend()
  ax[1].set_ylabel("degrees C")
  ax[1].set_xlabel("Date")

  ax[2].bar(nrv2_mean.index - 0.1, nrv2_diff, width, label='block2', yerr = nrv2_std, color = "red"   )
  ax[2].bar(nrv3_mean.index + 0.1, nrv3_diff, width, label='block3', yerr = nrv3_std, color = "green")
  ax[2].set_ylim(-5,5)
  ax[2].set_title("NRV")
  ax[2].legend()
  ax[2].set_ylabel("degrees C")
  ax[2].set_xlabel("Date")

  ax[3].bar(kkh2_mean.index - 0.1, kkh2_diff, width, label='block2', yerr = kkh2_std, color = "red"   )
  ax[3].bar(kkh3_mean.index + 0.1, kkh3_diff, width, label='block3', yerr = kkh3_std, color = "green")
  ax[3].set_ylim(-5,5)
  ax[3].set_title("KKH")
  ax[3].legend()
  ax[3].set_ylabel("degrees C")
  ax[3].set_xlabel("Date")

  plt.show()

#takes data_dict and desired percentile of leaf temperature to be used, and outputs a time-series bar chart showing leaf temperature deviations from the date_block mean temperature, separated
#by blocks. "date_block" mean temperature means the mean temperature of all leaf temperature measurements on a given day in the block of interest.

def plot_charts(data_dict, percentile):
  rows = []
  for date in data_dict.keys():
    for block in data_dict[date].keys():
      for plot in data_dict[date][block].keys():
        for file1 in data_dict[date][block][plot].keys():
          value_array = data_dict[date][block][plot][file1]
          row = [date, block, plot, file1, value_array]
          rows.append(row)
  big_df = pd.DataFrame(rows, columns = ["date_col", "block", "plot", "file", "value_array"])

  #adds a column to the dataframe to get ONE leaf temperature value for each file at the given percentile
  big_df['percentile_temp'] = big_df.apply(lambda row: np.percentile(row.value_array, percentile), axis=1)
  big_df = big_df[big_df["plot"] != "LBW"] #LBW has some issues... shade, sometimes includes invasive plant that seems to be significantly cooler
  big_df["date_col"] = pd.to_datetime(big_df["date_col"], yearfirst = True)

  big_df.loc[big_df["plot"] == "KKH", "adaptation"] = "cool"
  big_df.loc[big_df["plot"] == "NRV", "adaptation"] = "warm"
  big_df.loc[big_df["plot"] == "CCR", "adaptation"] = "warm"
  big_df.loc[big_df["plot"] == "CLF", "adaptation"] = "cool"
  big_df.loc[big_df["plot"] == "JLA", "adaptation"] = "cool"
  big_df.loc[big_df["plot"] == "LBW", "adaptation"] = "warm"

  nums = sorted(big_df.date_col.unique())
  conditions1 = [
    (big_df.date_col == nums[0]),
    (big_df.date_col == nums[1]),
    (big_df.date_col == nums[2]),
    (big_df.date_col == nums[3]),
    (big_df.date_col == nums[4]),
    (big_df.date_col == nums[5]),
    (big_df.date_col == nums[6]),
    (big_df.date_col == nums[7]),
    (big_df.date_col == nums[8])
  ]

  values = [1,2,3,4,5,6,7,8,9]
  big_df["Day"] = np.select(conditions1, values)

  big_df.index = big_df.Day

  block2 = big_df[big_df["block"] == "block2"]
  block3 = big_df[big_df["block"] == "block3"]

  ccr2 = block2[block2["plot"] == "CCR"]
  clf2 = block2[block2["plot"] == "CLF"]
  jla2 = block2[block2["plot"] == "JLA"]
  kkh2 = block2[block2["plot"] == "KKH"]
  lbw2 = block2[block2["plot"] == "LBW"]
  nrv2 = block2[block2["plot"] == "NRV"]

  ccr3 = block3[block3["plot"] == "CCR"]
  clf3 = block3[block3["plot"] == "CLF"]
  jla3 = block3[block3["plot"] == "JLA"]
  kkh3 = block3[block3["plot"] == "KKH"]
  lbw3 = block3[block3["plot"] == "LBW"]
  nrv3 = block3[block3["plot"] == "NRV"]

  days = [i for i in block2.Day.unique()]
  days = np.sort(days)

  block2_mean = block2.groupby(block2.Day)['percentile_temp'].mean()
  block3_mean = block3.groupby(block3.Day)['percentile_temp'].mean()

  ccr2_mean = ccr2.groupby(ccr2.Day)['percentile_temp'].mean()
  clf2_mean = clf2.groupby(clf2.Day)['percentile_temp'].mean()
  jla2_mean = jla2.groupby(jla2.Day)['percentile_temp'].mean()
  lbw2_mean = lbw2.groupby(lbw2.Day)['percentile_temp'].mean()
  nrv2_mean = nrv2.groupby(nrv2.Day)['percentile_temp'].mean()
  kkh2_mean = kkh2.groupby(kkh2.Day)['percentile_temp'].mean()

  ccr2_std = ccr2.groupby(ccr2.Day)['percentile_temp'].std()
  clf2_std = clf2.groupby(clf2.Day)['percentile_temp'].std()
  jla2_std = jla2.groupby(jla2.Day)['percentile_temp'].std()
  lbw2_std = lbw2.groupby(lbw2.Day)['percentile_temp'].std()
  nrv2_std = nrv2.groupby(nrv2.Day)['percentile_temp'].std()
  kkh2_std = kkh2.groupby(kkh2.Day)['percentile_temp'].std()

  ccr3_mean = ccr3.groupby(ccr3.Day)['percentile_temp'].mean()
  clf3_mean = clf3.groupby(clf3.Day)['percentile_temp'].mean()
  jla3_mean = jla3.groupby(jla3.Day)['percentile_temp'].mean()
  lbw3_mean = lbw3.groupby(lbw3.Day)['percentile_temp'].mean()
  nrv3_mean = nrv3.groupby(nrv3.Day)['percentile_temp'].mean()
  kkh3_mean = kkh3.groupby(kkh3.Day)['percentile_temp'].mean()

  ccr3_std = ccr3.groupby(ccr3.Day)['percentile_temp'].std()
  clf3_std = clf3.groupby(clf3.Day)['percentile_temp'].std()
  jla3_std = jla3.groupby(jla3.Day)['percentile_temp'].std()
  lbw3_std = lbw3.groupby(lbw3.Day)['percentile_temp'].std()
  nrv3_std = nrv3.groupby(nrv3.Day)['percentile_temp'].std()
  kkh3_std = kkh3.groupby(kkh3.Day)['percentile_temp'].std()

  x = np.arange(len(days))  # the label locations
  width = 0.1  # the width of the bars

  fig, ax = plt.subplots(2)
  fig.set_size_inches(18.5, 10.5)
  fig.suptitle("Variations in tree canopy temperature from block mean for each sampling date")

  ccr2_diff = (ccr2_mean - block2_mean)
  clf2_diff = (clf2_mean - block2_mean)
  jla2_diff = (jla2_mean - block2_mean)
  lbw2_diff = (lbw2_mean - block2_mean)
  nrv2_diff = (nrv2_mean - block2_mean)
  kkh2_diff = (kkh2_mean - block2_mean)
  ccr2_diff.dropna(axis = 0, inplace = True)
  clf2_diff.dropna(axis = 0, inplace = True)
  jla2_diff.dropna(axis = 0, inplace = True)
  lbw2_diff.dropna(axis = 0, inplace = True)
  nrv2_diff.dropna(axis = 0, inplace = True)
  kkh2_diff.dropna(axis = 0, inplace = True)

  ax[0].bar(ccr2_mean.index + 0.2, ccr2_diff, width, label='CCR', yerr = ccr2_std, color = "red"   )
  ax[0].bar(clf2_mean.index + 0.1, clf2_diff, width, label='CLF', yerr = clf2_std, color = "orange")
  ax[0].bar(jla2_mean.index + 0.0, jla2_diff, width, label='JLA', yerr = jla2_std, color = "pink"  )
  ax[0].bar(lbw2_mean.index - 0.0, lbw2_diff, width, label='LBW', yerr = lbw2_std, color = "green" )
  ax[0].bar(nrv2_mean.index - 0.1, nrv2_diff, width, label='NRV', yerr = nrv2_std, color = "blue"  )
  ax[0].bar(kkh2_mean.index - 0.2, kkh2_diff, width, label='KKH', yerr = kkh2_std, color = "purple")
  ax[0].set_ylim(-5, 5)
  ax[0].set_title("Block 2")
  ax[0].legend()
  # ax[0].set_xticklabels(dates)
  ax[0].set_ylabel("degrees C")
  ax[0].set_xlabel("Date")

  ccr3_diff = (ccr3_mean - block3_mean)
  clf3_diff = (clf3_mean - block3_mean)
  jla3_diff = (jla3_mean - block3_mean)
  lbw3_diff = (lbw3_mean - block3_mean)
  nrv3_diff = (nrv3_mean - block3_mean)
  kkh3_diff = (kkh3_mean - block3_mean)
  ccr3_diff.dropna(axis = 0, inplace = True)
  clf3_diff.dropna(axis = 0, inplace = True)
  jla3_diff.dropna(axis = 0, inplace = True)
  lbw3_diff.dropna(axis = 0, inplace = True)
  nrv3_diff.dropna(axis = 0, inplace = True)
  kkh3_diff.dropna(axis = 0, inplace = True)

  ax[1].bar(ccr3_mean.index + 0.2, ccr3_diff, width, label='CCR', yerr = ccr3_std, color = "red"   )
  ax[1].bar(clf3_mean.index + 0.1, clf3_diff, width, label='CLF', yerr = clf3_std, color = "orange")
  ax[1].bar(jla3_mean.index + 0.0, jla3_diff, width, label='JLA', yerr = jla3_std, color = "pink"  )
  ax[1].bar(lbw3_mean.index - 0.0, lbw3_diff, width, label='LBW', yerr = lbw3_std, color = "green" )
  ax[1].bar(nrv3_mean.index - 0.1, nrv3_diff, width, label='NRV', yerr = nrv3_std, color = "blue"  )
  ax[1].bar(kkh3_mean.index - 0.2, kkh3_diff, width, label='KKH', yerr = kkh3_std, color = "purple")
  ax[1].set_ylim(-5, 5)
  ax[1].set_title("Block 3")
  ax[1].legend()
  # ax[1].set_xticklabels(dates)
  ax[1].set_ylabel("degrees C")
  ax[1].set_xlabel("Date")

  plt.show()

#this function does the same thing as plot_charts, but it groups the populations into "cool-adapted" and "warm-adapted" populations, based on whether the Mean Annual Temperature
# of the population source location falls above or below the Mean Annual Temperature of the Agua Fria common garden. This defines NRV, CCR, and LBW as warm-adapted, which matches what Blasini
# et al. 2022 defines as warm-adapted as well
#This function is identical to plot_charts_by_adaptation_median, except it uses mean() to average the temperature percentile value from each file to get the adaptation average

def plot_charts_by_adaptation(data_dict, percentile):
  rows = []
  for date in data_dict.keys():
    for block in data_dict[date].keys():
      for plot in data_dict[date][block].keys():
        for file1 in data_dict[date][block][plot].keys():
          value_array = data_dict[date][block][plot][file1]
          row = [date, block, plot, file1, value_array]
          rows.append(row)
  big_df = pd.DataFrame(rows, columns = ["date_col", "block", "plot", "file", "value_array"])

  #add a column to the dataframe representing percentile temperature
  big_df['percentile_temp'] = big_df.apply(lambda row: np.percentile(row.value_array, percentile), axis=1)

  big_df = big_df[big_df["plot"] != "LBW"] #LBW has some issues... shade, sometimes includes invasive plant that seems to be significantly cooler
  big_df["date_col"] = pd.to_datetime(big_df["date_col"], yearfirst = True)

  big_df.loc[big_df["plot"] == "KKH", "adaptation"] = "cool"
  big_df.loc[big_df["plot"] == "NRV", "adaptation"] = "warm"
  big_df.loc[big_df["plot"] == "CCR", "adaptation"] = "warm"
  big_df.loc[big_df["plot"] == "CLF", "adaptation"] = "cool"
  big_df.loc[big_df["plot"] == "JLA", "adaptation"] = "cool"
  big_df.loc[big_df["plot"] == "LBW", "adaptation"] = "warm"

  nums = sorted(big_df.date_col.unique())
  conditions1 = [
    (big_df.date_col == nums[0]),
    (big_df.date_col == nums[1]),
    (big_df.date_col == nums[2]),
    (big_df.date_col == nums[3]),
    (big_df.date_col == nums[4]),
    (big_df.date_col == nums[5]),
    (big_df.date_col == nums[6]),
    (big_df.date_col == nums[7]),
    (big_df.date_col == nums[8])
  ]

  values = [1,2,3,4,5,6,7,8,9]
  big_df["Day"] = np.select(conditions1, values)

  big_df.index = big_df.Day

  block2 = big_df[big_df["block"] == "block2"]
  block3 = big_df[big_df["block"] == "block3"]

  warm2 = block2[block2["adaptation"] == "warm"]
  warm3 = block3[block3["adaptation"] == "warm"]
  cool2 = block2[block2["adaptation"] == "cool"]
  cool3 = block3[block3["adaptation"] == "cool"]

  days = [i for i in block2.Day.unique()]
  days = np.sort(days)

  overall_date_mean = big_df.groupby(big_df.Day)['percentile_temp'].mean()
  block2_mean = block2.groupby(block2.Day)['percentile_temp'].mean()
  block3_mean = block3.groupby(block3.Day)['percentile_temp'].mean()

  warm2_mean = warm2.groupby(warm2.Day)['percentile_temp'].mean()
  warm3_mean = warm3.groupby(warm3.Day)['percentile_temp'].mean()
  cool2_mean = cool2.groupby(cool2.Day)['percentile_temp'].mean()
  cool3_mean = cool3.groupby(cool3.Day)['percentile_temp'].mean()
  warm2_std = warm2.groupby(warm2.Day)['percentile_temp'].std()
  warm3_std = warm3.groupby(warm3.Day)['percentile_temp'].std()
  cool2_std = cool2.groupby(cool2.Day)['percentile_temp'].std()
  cool3_std = cool3.groupby(cool3.Day)['percentile_temp'].std()

  x = np.arange(len(days))  # the label locations
  width = 0.1  # the width of the bars

  fig, ax = plt.subplots(2)
  fig.set_size_inches(18.5, 10.5)
  fig.suptitle("Variations in tree canopy temperature from block mean for each sampling date")
  warm2_diff = (warm2_mean - block2_mean)
  cool2_diff = (cool2_mean - block2_mean)
  warm2_diff.dropna(axis = 0, inplace = True)
  cool2_diff.dropna(axis = 0, inplace = True)

  ax[0].bar(warm2_diff.index + 0.2, warm2_diff, width, label='warm2', yerr = np.sqrt(warm2_std**2 + warm2_std**2), color = "red"   )
  ax[0].bar(cool2_diff.index + 0.1, cool2_diff, width, label='cool2', yerr = np.sqrt(cool2_std**2 + cool2_std**2), color = "green")
  ax[0].set_ylim(-5, 5)
  ax[0].set_title("Block 2")
  ax[0].legend()
  # ax[0].set_xticklabels(dates)
  ax[0].set_ylabel("degrees C")
  ax[0].set_xlabel("Date")

  warm3_diff = (warm3_mean - block3_mean)
  cool3_diff = (cool3_mean - block3_mean)
  warm3_diff.dropna(axis = 0, inplace = True)
  cool3_diff.dropna(axis = 0, inplace = True)

  ax[1].bar(warm3_mean.index + 0.2, warm3_diff, width, label='warm3', yerr = np.sqrt(warm3_std**2 + warm3_std**2), color = "red"   )
  ax[1].bar(cool3_mean.index + 0.1, cool3_diff, width, label='cool3', yerr = np.sqrt(cool3_std**2 + cool3_std**2), color = "green")
  ax[1].set_ylim(-5, 5)
  ax[1].set_title("Block 3")
  ax[1].legend()
  # ax[1].set_xticklabels(dates)
  ax[1].set_ylabel("degrees C")
  ax[1].set_xlabel("Date")

  # plt.savefig("/content/drive/MyDrive/Drone processing/Thermal/AFTempChart.jpg")

  plt.show()

#same as plot_charts_by_adaptation but uses median to combine the percentile temperatures into a group average (in this case based off of adaptation)

def plot_charts_by_adaptation_median(data_dict, percentile):
  rows = []
  for date in data_dict.keys():
    for block in data_dict[date].keys():
      for plot in data_dict[date][block].keys():
        for file1 in data_dict[date][block][plot].keys():
          value_array = data_dict[date][block][plot][file1]
          row = [date, block, plot, file1, value_array]
          rows.append(row)
  big_df = pd.DataFrame(rows, columns = ["date_col", "block", "plot", "file", "value_array"])
  big_df['percentile_temp'] = big_df.apply(lambda row: np.percentile(row.value_array, percentile), axis=1)
  big_df = big_df[big_df["plot"] != "LBW"] #LBW has some issues... shade, sometimes includes invasive plant that seems to be significantly cooler
  big_df["date_col"] = pd.to_datetime(big_df["date_col"], yearfirst = True)

  big_df.loc[big_df["plot"] == "KKH", "adaptation"] = "cool"
  big_df.loc[big_df["plot"] == "NRV", "adaptation"] = "warm"
  big_df.loc[big_df["plot"] == "CCR", "adaptation"] = "warm"
  big_df.loc[big_df["plot"] == "CLF", "adaptation"] = "cool"
  big_df.loc[big_df["plot"] == "JLA", "adaptation"] = "cool"
  big_df.loc[big_df["plot"] == "LBW", "adaptation"] = "warm"

  nums = sorted(big_df.date_col.unique())
  conditions1 = [
    (big_df.date_col == nums[0]),
    (big_df.date_col == nums[1]),
    (big_df.date_col == nums[2]),
    (big_df.date_col == nums[3]),
    (big_df.date_col == nums[4]),
    (big_df.date_col == nums[5]),
    (big_df.date_col == nums[6]),
    (big_df.date_col == nums[7]),
    (big_df.date_col == nums[8])
  ]

  values = [1,2,3,4,5,6,7,8,9]
  big_df["Day"] = np.select(conditions1, values)

  big_df.index = big_df.Day

  block2 = big_df[big_df["block"] == "block2"]
  block3 = big_df[big_df["block"] == "block3"]

  warm2 = block2[block2["adaptation"] == "warm"]
  warm3 = block3[block3["adaptation"] == "warm"]
  cool2 = block2[block2["adaptation"] == "cool"]
  cool3 = block3[block3["adaptation"] == "cool"]

  days = [i for i in block2.Day.unique()]
  days = np.sort(days)

  overall_date_median = big_df.groupby(big_df.Day)['percentile_temp'].median()
  block2_median = block2.groupby(block2.Day)['percentile_temp'].median()
  block3_median = block3.groupby(block3.Day)['percentile_temp'].median()

  warm2_median = warm2.groupby(warm2.Day)['percentile_temp'].median()
  warm3_median = warm3.groupby(warm3.Day)['percentile_temp'].median()
  cool2_median = cool2.groupby(cool2.Day)['percentile_temp'].median()
  cool3_median = cool3.groupby(cool3.Day)['percentile_temp'].median()
  warm2_std = warm2.groupby(warm2.Day)['percentile_temp'].std()
  warm3_std = warm3.groupby(warm3.Day)['percentile_temp'].std()
  cool2_std = cool2.groupby(cool2.Day)['percentile_temp'].std()
  cool3_std = cool3.groupby(cool3.Day)['percentile_temp'].std()

  x = np.arange(len(days))  # the label locations
  width = 0.1  # the width of the bars

  fig, ax = plt.subplots(2)
  fig.set_size_inches(18.5, 10.5)
  fig.suptitle("Variations in tree canopy temperature from block mean for each sampling date")

  warm2_diff = (warm2_median - block2_median)
  cool2_diff = (cool2_median - block2_median)
  warm2_diff.dropna(axis = 0, inplace = True)
  cool2_diff.dropna(axis = 0, inplace = True)

  ax[0].bar(warm2_diff.index + 0.2, warm2_diff, width, label='warm2', yerr = np.sqrt(warm2_std**2 + warm2_std**2), color = "red"   )
  ax[0].bar(cool2_diff.index + 0.1, cool2_diff, width, label='cool2', yerr = np.sqrt(cool2_std**2 + cool2_std**2), color = "green")
  ax[0].set_ylim(-10, 10)
  ax[0].set_title("Block 2")
  ax[0].legend()
  # ax[0].set_xticklabels(dates)
  ax[0].set_ylabel("degrees C")
  ax[0].set_xlabel("Date")

  warm3_diff = (warm3_median - block3_median)
  cool3_diff = (cool3_median - block3_median)
  warm3_diff.dropna(axis = 0, inplace = True)
  cool3_diff.dropna(axis = 0, inplace = True)

  ax[1].bar(warm3_median.index + 0.2, warm3_diff, width, label='warm3', yerr = np.sqrt(warm3_std**2 + warm3_std**2), color = "red"   )
  ax[1].bar(cool3_median.index + 0.1, cool3_diff, width, label='cool3', yerr = np.sqrt(cool3_std**2 + cool3_std**2), color = "green")
  ax[1].set_ylim(-5, 5)
  ax[1].set_title("Block 3")
  ax[1].legend()
  ax[1].set_ylabel("degrees C")
  ax[1].set_xlabel("Date")

  plt.show()

# def create_warm_cool_dict(data_dict):
    
#function to create dictionary of dictionaries of folder structure. values = None
def f(path):
    if os.path.isdir(path):
        d = {}
        for name in os.listdir(path):
            d[name] = f(os.path.join(path, name))
        return d
    else:
        pass

def create_data_dict(empty_dict):
    dir_list = [] #in case we ever need a list of subdirectories
    for date in empty_dict.keys():
      print(date)
      for block in empty_dict[date].keys():
        print(block)
        for plot in empty_dict[date][block].keys():
          print(plot)
          
          directory = dir + str(date) + "/" + str(block) + "/" + str(plot) +"/"
          dir_list.append(directory)
    
          #call both processing functions defined at beginning of notebook
          rgb_dict, thermal_dict, name_list = create_dict(directory)
          
          thermal_pixel_value_dict, pic_list = extract_leaf_thermal(rgb_dict, thermal_dict)
          
          data_dict = empty_dict.copy()
          
          #populate data_dict with thermal pixel values -- all values from each directory after masking for non-leaf pixels
          data_dict[date][block][plot] = thermal_pixel_value_dict
          
    return data_dict
        
  # all_numbers = []
  # date_dict = {'200902': None, '200909': None, '200923': None, '201002': None, '201007': None, '201014': None, "201027": None, "201104": None, '201111': None}
  # block_dict = {"block2": {"JLA": None, "CCR": None,  "CLF": None , "KKH": None, "LBW": None, "NRV": None, "JLV": None}, "block3": {"JLA": None, "CCR": None,  "CLF": None , "KKH": None, "LBW": None, "NRV": None, "JLV": None}}
  # plot_dict = {"JLA": None, "CCR": None,  "CLF": None , "KKH": None, "LBW": None, "NRV": None, "JLV": None}
  # name_list = ["JLA","CCR","CLF","KKH","LBW","NRV","JLV"]
  # date_list = ['200902','200909','200923','201002','201007','201014',"201027","201104",'201111']
  # warm_cool_dict = {'200902': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '200909': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '200923': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '201002': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '201007': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '201014': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, "201027": {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, "201104": {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '201111': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}}

  hist_dict = date_dict.copy()

  for date in date_dict.keys():
    date_dict[date] = block_dict

  overall_warm_dist = []
  overall_cool_dist = []

  block2_cool_dist = []
  block2_warm_dist = []
  block3_cool_dist = []
  block3_warm_dist = []

  cool2_abs_temp = []
  warm2_abs_temp = []
  cool3_abs_temp = []
  warm3_abs_temp = []

  for date in data_dict.keys():
    date_dist = []
    for block in data_dict[date].keys():
      block_dist = []
      # print(block)
      warm_dist = []
      cool_dist = []

      for plot in data_dict[date][block].keys():

        plot_dist = []

        if plot == "KKH":
          adaptation = "cool"
        elif plot == "NRV":
          adaptation = "warm"
        elif plot == "CCR":
          adaptation = "warm"
        elif plot == "CLF":
          adaptation = "cool"
        elif plot == "JLA":
          adaptation = "cool"
        elif plot == "LBW":
          adaptation = "warm"
        else:
          print("check out the if elif loop...")

        for file1 in data_dict[date][block][plot].keys():
          for num in data_dict[date][block][plot][file1]:
            # date_dist.append(num)
            block_dist.append(num)
            plot_dist.append(num)

            if adaptation == "warm":
              warm_dist.append(num)
            elif adaptation == "cool":
              cool_dist.append(num)

        date_dict[date][block][plot] = plot_dist
      
      block_mean = np.mean(block_dist)

      warm_dist_np = np.array(warm_dist)
      cool_dist_np = np.array(cool_dist)
      warm_norm = warm_dist_np - block_mean
      cool_norm = cool_dist_np - block_mean

      for num in warm_norm:
        overall_warm_dist.append(num)
      for num in cool_norm:
        overall_cool_dist.append(num)
      
      if block == "block2":
        for num in warm_norm:
          block2_warm_dist.append(num)
        for num in cool_norm:
          block2_cool_dist.append(num)
        for num in warm_dist:
          warm2_abs_temp.append(num)
        for num in cool_dist:
          cool2_abs_temp.append(num)

      if block == "block3":
        for num in warm_norm:
          block3_warm_dist.append(num)
        for num in cool_norm:
          block3_cool_dist.append(num)
        for num in warm_dist:
          warm3_abs_temp.append(num)
        for num in cool_dist:
          cool3_abs_temp.append(num)
      
      warm_cool_dict[date][block]["warm"] = warm_dist
      warm_cool_dict[date][block]["cool"] = cool_dist

  return warm_cool_dict





### MAIN #####
dir = '8_26_22_delete_leafless/'

empty_dict = f(dir)

data_dict = create_data_dict(empty_dict)

# empty_data_dict = dict1.copy() #copy dictionary to fill with np.arrays of thermal data

#iterate through subdirectories within main directory, call data processing functions defined above, 
#fill data_dict with np.arrays of thermal data for each subdirectory


# # def create_df_with_adaptation(data_dict, image_percentile):

# rows = []
# for date in data_dict.keys():
#   for block in data_dict[date].keys():
#     for plot in data_dict[date][block].keys():
#       for file1 in data_dict[date][block][plot].keys():
#         value_array = data_dict[date][block][plot][file1]
#         row = [date, block, plot, file1, value_array]
#         rows.append(row)
# df = pd.DataFrame(rows, columns = ["date_col", "block", "plot", "file", "value_array"])

# df['percentile_temp'] = df.apply(lambda row: np.percentile(row.value_array, 50), axis=1)

# nums = sorted(df.date_col.unique())
# conditions1 = [
#   (df.date_col == nums[0]),
#   (df.date_col == nums[1]),
#   (df.date_col == nums[2]),
#   (df.date_col == nums[3]),
#   (df.date_col == nums[4]),
#   (df.date_col == nums[5]),
#   (df.date_col == nums[6]),
#   (df.date_col == nums[7]),
#   (df.date_col == nums[8])
# ]

# values = [1,2,3,4,5,6,7,8,9]
# df["day_number"] = np.select(conditions1, values)

# df.loc[df["plot"] == "KKH", "adaptation"] = "cool"
# df.loc[df["plot"] == "NRV", "adaptation"] = "warm"
# df.loc[df["plot"] == "CCR", "adaptation"] = "warm"
# df.loc[df["plot"] == "CLF", "adaptation"] = "cool"
# df.loc[df["plot"] == "JLA", "adaptation"] = "cool"
# df.loc[df["plot"] == "LBW", "adaptation"] = "warm"

# df['indentifier'] = df.apply(lambda row: str(row.block)+str(adaptation), axis=1)
def create_df_with_adaptation(data_dict, image_percentile):

    rows = []
    for date in data_dict.keys():
      for block in data_dict[date].keys():
        for plot in data_dict[date][block].keys():
          for file1 in data_dict[date][block][plot].keys():
            value_array = data_dict[date][block][plot][file1]
            row = [date, block, plot, file1, value_array]
            rows.append(row)
    df = pd.DataFrame(rows, columns = ["date_col", "block", "plot", "file", "value_array"])
    
    df['percentile_temp'] = df.apply(lambda row: np.percentile(row.value_array, 50), axis=1)
    
    nums = sorted(df.date_col.unique())
    conditions1 = [
      (df.date_col == nums[0]),
      (df.date_col == nums[1]),
      (df.date_col == nums[2]),
      (df.date_col == nums[3]),
      (df.date_col == nums[4]),
      (df.date_col == nums[5]),
      (df.date_col == nums[6]),
      (df.date_col == nums[7]),
      (df.date_col == nums[8])
    ]
    
    values = [1,2,3,4,5,6,7,8,9]
    df["day_number"] = np.select(conditions1, values)
    
    df.loc[df["plot"] == "KKH", "adaptation"] = "cool"
    df.loc[df["plot"] == "NRV", "adaptation"] = "warm"
    df.loc[df["plot"] == "CCR", "adaptation"] = "warm"
    df.loc[df["plot"] == "CLF", "adaptation"] = "cool"
    df.loc[df["plot"] == "JLA", "adaptation"] = "cool"
    df.loc[df["plot"] == "LBW", "adaptation"] = "warm"
    
    df['indentifier'] = df.apply(lambda row: str(row.block)+str(adaptation), axis=1)



# df

# # return df

df = create_df_with_adaptation(data_dict, 50)

df.to_csv("/content/drive/MyDrive/Drone processing/Thermal/df_csv")



print(plot_charts(data_dict, 50))

print(plot_charts_by_adaptation_median(data_dict, 50))

warm_cool_dict = create_warm_cool_dict(data_dict)

#9/6/22 failed attempt to create a time series chart by adaptation using the overall distribution of date-block-warm, date-block-cool, etc.


date_block_dict = {'200902': {"block2": {"mean": None, "std": None}, "block3": {"mean": None, "std": None}}, '200909': {"block2": {"mean": None, "std": None}, "block3": {"mean": None, "std": None}}, '200923': {"block2": {"mean": None, "std": None}, "block3": {"mean": None, "std": None}}, '201002': {"block2": {"mean": None, "std": None}, "block3": {"mean": None, "std": None}}, '201007': {"block2": {"mean": None, "std": None}, "block3": {"mean": None, "std": None}}, '201014': {"block2": {"mean": None, "std": None}, "block3": {"mean": None, "std": None}}, "201027": {"block2": {"mean": None, "std": None}, "block3": {"mean": None, "std": None}}, "201104": {"block2": {"mean": None, "std": None}, "block3": {"mean": None, "std": None}}, '201111': {"block2": {"mean": None, "std": None}, "block3": {"mean": None, "std": None}}}

warm_cool_dict = {'200902': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '200909': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '200923': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '201002': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '201007': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '201014': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, "201027": {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, "201104": {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '201111': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}}

for date in warm_cool_dict.keys():
  for block in warm_cool_dict[date].keys():
    block_list = []
    for adaptation in warm_cool_dict[date][block].keys():
      adapt_list = []
      for num in warm_cool_dict[date][block][adaptation]:
        adapt_list.append(num)
      block_list.append(adapt_list)
    block_np = np.array(block_list)
    block_mean = np.mean(block_list)
    # block_std = np.std(block_np)

    date_block_dict[date][block]["mean"] = block_mean
    # date_block_dict[date][block]["std"] = block_std


rows = []
for date in warm_cool_dict.keys():
  for block in warm_cool_dict[date].keys():
    block_dist = []

    for adaptation in warm_cool_dict[date][block].keys():
      for num in warm_cool_dict[date][block][adaptation]:
        block_dist.append(num)
    
    block_mean = np.mean(block_dist)
    block_std = np.std(block_dist)

    for adaptation in warm_cool_dict[date][block].keys():

      value_array = warm_cool_dict[date][block][adaptation]
      np_array = np.array(value_array)
      mean = np.mean(value_array)
      std = np.std(np_array)



      # block_mean = date_block_dict[date][block]["mean"]
      # block_std = date_block_dict[date][block]["std"]

      diff = mean - block_mean
      diff_error = np.sqrt(std**2 + block_std**2)

      row = [date, block, adaptation, value_array, block_mean, diff, diff_error, mean, std]
      rows.append(row)
warm_cool_df = pd.DataFrame(rows, columns = ["date", "block", "adaptation", "value_array", "block_mean", "diff", "diff_error", "mean", "std"])

dates = sorted(warm_cool_df.date.unique())

conditions1 = [
  (warm_cool_df.date == dates[0]),
  (warm_cool_df.date == dates[1]),
  (warm_cool_df.date == dates[2]),
  (warm_cool_df.date == dates[3]),
  (warm_cool_df.date == dates[4]),
  (warm_cool_df.date == dates[5]),
  (warm_cool_df.date == dates[6]),
  (warm_cool_df.date == dates[7]),
  (warm_cool_df.date == dates[8])
]

values = [1,2,3,4,5,6,7,8,9]
warm_cool_df["Day"] = np.select(conditions1, values)

warm_cool_df.index = warm_cool_df.Day

# overall_date_mean = warm_cool_df.groupby(warm_cool_df.Day)['mean'].mean()

block2 = warm_cool_df[warm_cool_df["block"] == "block2"]
block3 = warm_cool_df[warm_cool_df["block"] == "block3"]

warm2 = block2[block2["adaptation"] == "warm"]
warm3 = block3[block3["adaptation"] == "warm"]
cool2 = block2[block2["adaptation"] == "cool"]
cool3 = block3[block3["adaptation"] == "cool"]

fig, ax = plt.subplots(2)
fig.set_size_inches(18.5, 10.5)
fig.suptitle("Variations in tree canopy temperature from block mean for each sampling date")


ax[0].bar(warm2.index + 0.2, warm2["diff"], 0.5, label='warm2', yerr = warm2["diff_error"], color = "red"   )
ax[0].bar(cool2.index - 0.2, cool2["diff"], 0.5, label='cool2', yerr = cool2["diff_error"], color = "green")
ax[1].set_ylim(-10, 10)
ax[0].set_title("Block 3")
ax[0].legend()
ax[0].set_ylabel("degrees C")
ax[0].set_xlabel("Date")


ax[1].bar(warm3.index + 0.2, warm3["diff"], 0.5, label='warm3', yerr = warm3["diff_error"], color = "red"   )
ax[1].bar(cool3.index - 0.2, cool3["diff"], 0.5, label='cool3', yerr = cool3["diff_error"], color = "green")
ax[1].set_ylim(-10, 10)
ax[1].set_title("Block 3")
ax[1].legend()
ax[1].set_ylabel("degrees C")
ax[1].set_xlabel("Date")

plt.show()

warm_cool_dict

rows = []
for date in warm_cool_dict.keys():
  for block in warm_cool_dict[date].keys():
    for adaptation in warm_cool_dict[date][block].keys():
      value_array = warm_cool_dict[date][block][adaptation]
      row = [date, block, adaptation, value_array]
      rows.append(row)
warm_cool_df = pd.DataFrame(rows, columns = ["date_col", "block", "adaptation", "value_array"])

# df['percentile_temp'] = df.apply(lambda row: np.percentile(row.value_array, image_percentile), axis=1)
warm_cool_df["percentile_temp"] = warm_cool_df.apply(lambda row: np.percentile(row.value_array, 50), axis = 1)
warm_cool_df["identifier"] = warm_cool_df.apply(lambda row: str(row.date_col)+str(row.block)+str(row.adaptation), axis = 1)
warm_cool_df = warm_cool_df.drop(["value_array"], axis = 1)
# warm_cool_df
warm_cool_df.to_csv("/content/drive/MyDrive/Drone processing/Thermal/warm_cool_df_csv")
# nums = sorted(warm_cool_df.date_col.unique())

# conditions1 = [
#   (warm_cool_df.date_col == nums[0]),
#   (warm_cool_df.date_col == nums[1]),
#   (warm_cool_df.date_col == nums[2]),
#   (warm_cool_df.date_col == nums[3]),
#   (warm_cool_df.date_col == nums[4]),
#   (warm_cool_df.date_col == nums[5]),
#   (warm_cool_df.date_col == nums[6]),
#   (warm_cool_df.date_col == nums[7]),
#   (warm_cool_df.date_col == nums[8])
# ]

# values = [1,2,3,4,5,6,7,8,9]
# warm_cool_df["Day"] = np.select(conditions1, values)

# warm_cool_df.index = warm_cool_df.Day

# block2 = warm_cool_df[warm_cool_df["block"] == "block2"]
# block3 = warm_cool_df[warm_cool_df["block"] == "block3"]

# warm2 = block2[block2["adaptation"] == "warm"]
# warm3 = block3[block3["adaptation"] == "warm"]
# cool2 = block2[block2["adaptation"] == "cool"]
# cool3 = block3[block3["adaptation"] == "cool"]

# # warm2

# days = [i for i in block2.Day.unique()]
# days = np.sort(days)

# # overall_date_mean = warm_cool_df.groupby(warm_cool_df.Day)['value_array'].mean()
# # block2_mean = block2.groupby(block2.Day)['value_array'].mean()
# # block3_mean = block3.groupby(block3.Day)['value_array'].mean()

# # c
# # c
# # c
# # c
# # c
# # c
# # c
# # c

# x = np.arange(len(days))  # the label locations
# width = 0.1  # the width of the bars

# fig, ax = plt.subplots(2)
# fig.set_size_inches(18.5, 10.5)
# fig.suptitle("Variations in tree canopy temperature from block mean for each sampling date")

# # warm2_diff = (warm2_mean - block2_mean)
# # cool2_diff = (cool2_mean - block2_mean)
# # warm2_diff.dropna(axis = 0, inplace = True)
# # cool2_diff.dropna(axis = 0, inplace = True)

# ax[0].bar(values, warm2.value_array, width, label='warm2',  color = "red"   )
# ax[0].bar(values, cool2.value_array, width, label='cool2',  color = "green")
# ax[0].set_ylim(-10, 10)
# ax[0].set_title("Block 2")
# ax[0].legend()
# # ax[0].set_xticklabels(dates)
# ax[0].set_ylabel("degrees C")
# ax[0].set_xlabel("Date")

# warm3_diff = (warm3_mean - block3_mean)
# cool3_diff = (cool3_mean - block3_mean)
# warm3_diff.dropna(axis = 0, inplace = True)
# cool3_diff.dropna(axis = 0, inplace = True)

# ax[1].bar(values, warm3.value_array, width, label='warm3', color = "red"   )
# ax[1].bar(values, cool3.value_array, width, label='cool3', color = "green")
# ax[1].set_ylim(-5, 5)
# ax[1].set_title("Block 3")
# ax[1].legend()
# ax[1].set_ylabel("degrees C")
# ax[1].set_xlabel("Date")

# plt.show()

all_numbers = []
date_dict = {'200902': None, '200909': None, '200923': None, '201002': None, '201007': None, '201014': None, "201027": None, "201104": None, '201111': None}
block_dict = {"block2": {"JLA": None, "CCR": None,  "CLF": None , "KKH": None, "LBW": None, "NRV": None, "JLV": None}, "block3": {"JLA": None, "CCR": None,  "CLF": None , "KKH": None, "LBW": None, "NRV": None, "JLV": None}}
plot_dict = {"JLA": None, "CCR": None,  "CLF": None , "KKH": None, "LBW": None, "NRV": None, "JLV": None}
name_list = ["JLA","CCR","CLF","KKH","LBW","NRV","JLV"]
date_list = ['200902','200909','200923','201002','201007','201014',"201027","201104",'201111']
warm_cool_dict = {'200902': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '200909': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '200923': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '201002': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '201007': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '201014': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, "201027": {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, "201104": {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '201111': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}}

# hist_dict = date_dict.copy()

for date in date_dict.keys():
    date_dict[date] = block_dict

overall_warm_dist = []
overall_cool_dist = []

block2_cool_dist = []
block2_warm_dist = []
block3_cool_dist = []
block3_warm_dist = []

cool2_abs_temp = []
warm2_abs_temp = []
cool3_abs_temp = []
warm3_abs_temp = []

for date in data_dict.keys():
  date_dist = []
  for block in data_dict[date].keys():
    block_dist = []
    # print(block)
    warm_dist = []
    cool_dist = []

    for plot in data_dict[date][block].keys():

      plot_dist = []

      if plot == "KKH":
        adaptation = "cool"
      elif plot == "NRV":
        adaptation = "warm"
      elif plot == "CCR":
        adaptation = "warm"
      elif plot == "CLF":
        adaptation = "cool"
      elif plot == "JLA":
        adaptation = "cool"
      elif plot == "LBW":
        adaptation = "warm"
      else:
        print("check out the if elif loop...")

      for file1 in data_dict[date][block][plot].keys():
        for num in data_dict[date][block][plot][file1]:
          # date_dist.append(num)
          block_dist.append(num)
          plot_dist.append(num)

          if adaptation == "warm":
            warm_dist.append(num)
          elif adaptation == "cool":
            cool_dist.append(num)

      date_dict[date][block][plot] = plot_dist
    
    block_mean = np.mean(block_dist)

    warm_dist_np = np.array(warm_dist)
    cool_dist_np = np.array(cool_dist)
    warm_norm = warm_dist_np - block_mean
    cool_norm = cool_dist_np - block_mean

    for num in warm_norm:
      overall_warm_dist.append(num)
    for num in cool_norm:
      overall_cool_dist.append(num)
    
    if block == "block2":
      for num in warm_norm:
        block2_warm_dist.append(num)
      for num in cool_norm:
        block2_cool_dist.append(num)
      for num in warm_dist:
        warm2_abs_temp.append(num)
      for num in cool_dist:
        cool2_abs_temp.append(num)

    if block == "block3":
      for num in warm_norm:
        block3_warm_dist.append(num)
      for num in cool_norm:
        block3_cool_dist.append(num)
      for num in warm_dist:
        warm3_abs_temp.append(num)
      for num in cool_dist:
        cool3_abs_temp.append(num)
    
    warm_cool_dict[date][block]["warm"] = warm_dist
    warm_cool_dict[date][block]["cool"] = cool_dist

# OPTION 2: take percentile of leaf temps in each file, then work with that data

# all_numbers = []
# date_dict = {'200902': None, '200909': None, '200923': None, '201002': None, '201007': None, '201014': None, "201027": None, "201104": None, '201111': None}
# block_dict = {"block2": {"JLA": None, "CCR": None,  "CLF": None , "KKH": None, "LBW": None, "NRV": None, "JLV": None}, "block3": {"JLA": None, "CCR": None,  "CLF": None , "KKH": None, "LBW": None, "NRV": None, "JLV": None}}
# plot_dict = {"JLA": None, "CCR": None,  "CLF": None , "KKH": None, "LBW": None, "NRV": None, "JLV": None}
# name_list = ["JLA","CCR","CLF","KKH","LBW","NRV","JLV"]
# date_list = ['200902','200909','200923','201002','201007','201014',"201027","201104",'201111']
# warm_cool_dict = {'200902': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '200909': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '200923': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '201002': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '201007': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '201014': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, "201027": {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, "201104": {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '201111': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}}

# hist_dict = date_dict.copy()

# for date in date_dict.keys():
#   date_dict[date] = block_dict

# overall_warm_dist = []
# overall_cool_dist = []

# block2_cool_dist = []
# block2_warm_dist = []
# block3_cool_dist = []
# block3_warm_dist = []

# cool2_abs_temp = []
# warm2_abs_temp = []
# cool3_abs_temp = []
# warm3_abs_temp = []

# for date in data_dict.keys():
#   date_dist = []
#   for block in data_dict[date].keys():
#     block_dist = []
#     # print(block)
#     warm_dist = []
#     cool_dist = []

#     for plot in data_dict[date][block].keys():

#       plot_dist = []

#       if plot == "KKH":
#         adaptation = "cool"
#       elif plot == "NRV":
#         adaptation = "warm"
#       elif plot == "CCR":
#         adaptation = "warm"
#       elif plot == "CLF":
#         adaptation = "cool"
#       elif plot == "JLA":
#         adaptation = "cool"
#       elif plot == "LBW":
#         adaptation = "warm"
#       else:
#         print("check out the if elif loop...")

#       for file1 in data_dict[date][block][plot].keys():
#         file_dist = []
#         for num in data_dict[date][block][plot][file1]:
#           # date_dist.append(num)
#           # block_dist.append(num)
#           # plot_dist.append(num)
#           file_dist.append(num)

#         file_np = np.array(file_dist)
#         file_perc = np.percentile(file_np, 25)

#         block_dist.append(file_perc)
#         plot_dist.append(file_perc)

#         if adaptation == "warm":
#           warm_dist.append(file_perc)
#         elif adaptation == "cool":
#           cool_dist.append(file_perc)

#       date_dict[date][block][plot] = plot_dist
    
#     block_mean = np.mean(block_dist)

#     warm_dist_np = np.array(warm_dist)
#     cool_dist_np = np.array(cool_dist)
#     warm_norm = warm_dist_np - block_mean
#     cool_norm = cool_dist_np - block_mean

#     for num in warm_norm:
#       overall_warm_dist.append(num)
#     for num in cool_norm:
#       overall_cool_dist.append(num)
    
#     if block == "block2":
#       for num in warm_norm:
#         block2_warm_dist.append(num)
#       for num in cool_norm:
#         block2_cool_dist.append(num)
#       for num in warm_dist:
#         warm2_abs_temp.append(num)
#       for num in cool_dist:
#         cool2_abs_temp.append(num)

#     if block == "block3":
#       for num in warm_norm:
#         block3_warm_dist.append(num)
#       for num in cool_norm:
#         block3_cool_dist.append(num)
#       for num in warm_dist:
#         warm3_abs_temp.append(num)
#       for num in cool_dist:
#         cool3_abs_temp.append(num)
    
#     warm_cool_dict[date][block]["warm"] = warm_dist
#     warm_cool_dict[date][block]["cool"] = cool_dist

### find percentage above certain temperature ####

cool2_abs_temp = np.array(cool2_abs_temp)
warm2_abs_temp = np.array(warm2_abs_temp)
cool3_abs_temp = np.array(cool3_abs_temp)
warm3_abs_temp = np.array(warm3_abs_temp)

tcrit = 50

cool2_bool = cool2_abs_temp > tcrit
warm2_bool = warm2_abs_temp > tcrit
cool3_bool = cool3_abs_temp > tcrit
warm3_bool = warm3_abs_temp > tcrit

# count = np.count_nonzero(arr)
cool2_perc_above = (np.count_nonzero(cool2_bool) / len(cool2_abs_temp) * 100)
warm2_perc_above = (np.count_nonzero(warm2_bool) / len(warm2_abs_temp) * 100)
cool3_perc_above = (np.count_nonzero(cool3_bool) / len(cool3_abs_temp) * 100)
warm3_perc_above = (np.count_nonzero(warm3_bool) / len(warm3_abs_temp) * 100)

print("percentage of Block 2 cool-adapted leaves above {}ÂºC: {:.2f}%".format(tcrit, cool2_perc_above))
print("percentage of Block 2 warm-adapted leaves above {}ÂºC: {:.2f}%".format(tcrit, warm2_perc_above))
print("percentage of Block 3 cool-adapted leaves above {}ÂºC: {:.2f}%".format(tcrit, cool3_perc_above))
print("percentage of Block 3 warm-adapted leaves above {}ÂºC: {:.2f}%".format(tcrit, warm3_perc_above))

data = [cool2_perc_above, warm2_perc_above, cool3_perc_above, warm3_perc_above]
plt.bar(x = ['cool2', 'warm2', 'cool3', 'warm3'], height = data)
plt.show()

cool_overall_np.mean() - warm_overall_np.mean()

data = [overall_warm_dist, overall_cool_dist]
labels = ["overall_warm_dist", "overall_cool_dist"]

fig = plt.figure(figsize =(10, 7))
 
# Creating axes instance
ax = fig.add_axes([0, 0, 1, 1])
 
# Creating plot
bp = ax.boxplot(data, showfliers = False, labels = labels, whis = (10,90))
 
# show plot
plt.show()



plt.hist(block3_warm_dist, bins = 100, range = (-10, 20))
plt.axvline(0, color='k', linestyle='dashed', linewidth=1)

####SKEW AND KURTOSIS MEASURES #####
warm_kurt = kurtosis(overall_warm_dist)
# warm_skew = skew(overall_warm_dist)
cool_kurt = kurtosis(overall_cool_dist)
# cool_skew = skew(overall_cool_dist)
warm2_kurt = kurtosis(block2_warm_dist)
# warm2_skew = skew(block2_warm_dist)
cool2_kurt = kurtosis(block2_cool_dist)
# cool2_skew = skew(block2_cool_dist)
warm3_kurt = kurtosis(block3_warm_dist)
# warm3_skew = skew(block3_warm_dist)
cool3_kurt = kurtosis(block3_cool_dist)
# cool3_skew = skew(block3_cool_dist)

kurtosises = [warm2_kurt, cool2_kurt, warm3_kurt, cool3_kurt]


plt.bar(x = ["warm2_kurt", "cool2_kurt", "warm3_kurt", "cool3_kurt"], height = kurtosises)
plt.show()

#don't run after initial runtime
save_dict = data_dict.copy()

#restore data_dict 
data_dict = save_dict.copy()

# data = data_dict["200923"]
# data_dict = {"200902": None, "200909": None}
# data_dict["200902"] = data
# data_dict["200909"] = data

###### Analyze by mean maximum temperature #####

date_dict = {'200902': None, '200909': None, '200923': None, '201002': None, '201007': None, '201014': None, "201027": None, "201104": None, '201111': None}
block_dict = {'200902': {"block2": None, "block3": None}, '200909': {"block2": None, "block3": None}, '200923': {"block2": None, "block3": None}, '201002': {"block2": None, "block3": None}, '201007': {"block2": None, "block3": None}, '201014': {"block2": None, "block3": None}, "201027": {"block2": None, "block3": None}, "201104": {"block2": None, "block3": None}, '201111': {"block2": None, "block3": None}}

mwmt_rank_dict = {1: None, 2: None, 3: None, 4: None, 5: None, 6: None}
block2_mwmt_rank_dict = {1: None, 2: None, 3: None, 4: None, 5: None, 6: None}
block3_mwmt_rank_dict = {1: None, 2: None, 3: None, 4: None, 5: None, 6: None}

KKH_dist = []
NRV_dist = []
CCR_dist = []
CLF_dist = []
JLA_dist = []
LBW_dist = []

KKH2_dist = []
NRV2_dist = []
CCR2_dist = []
CLF2_dist = []
JLA2_dist = []
LBW2_dist = []

KKH3_dist = []
NRV3_dist = []
CCR3_dist = []
CLF3_dist = []
JLA3_dist = []
LBW3_dist = []

#GET DATE AND DATE_BLOCK MEANS
for date in data_dict.keys():
  date_dist = []
  for block in data_dict[date].keys():
    block_dist = []
    for plot in data_dict[date][block].keys():
      for file1 in data_dict[date][block][plot].keys():
        for num in data_dict[date][block][plot][file1]:
          date_dist.append(num)
          block_dist.append(num)
    block_dict[date][block] = block_dist
  date_dict[date] = date_dist

#POPULATE THE LISTS ABOVE WITH DISTRIBUTIONS OF VALUES MINUS DATE OR DATE_BLOCK MEAN
#CURRENTLY ON DATE MEAN -- HAVE TO CHANGE IF YOU WANT
for date in data_dict.keys():

  date_mean = np.array(date_dict[date]).mean()

  for block in data_dict[date].keys():

    date_block_mean = np.array(block_dict[date][block]).mean()

    for plot in data_dict[date][block].keys():

      plot_dist = []

      for file1 in data_dict[date][block][plot].keys():
        for num in data_dict[date][block][plot][file1]:
          plot_dist.append(num)

      plot_np = np.array(plot_dist)
      plot_norm = plot_np - date_block_mean

      for number in plot_norm:

        if plot == "KKH":
          KKH_dist.append(number)           
        elif plot == "NRV":
          NRV_dist.append(number)           
        elif plot == "CCR":
          CCR_dist.append(number)           
        elif plot == "CLF":
          CLF_dist.append(number)           
        elif plot == "JLA":
          JLA_dist.append(number)           
        elif plot == "LBW":
          LBW_dist.append(number)

        if block == "block2":
          if plot == "KKH":
            KKH2_dist.append(number)           
          elif plot == "NRV":
            NRV2_dist.append(number)           
          elif plot == "CCR":
            CCR2_dist.append(number)           
          elif plot == "CLF":
            CLF2_dist.append(number)           
          elif plot == "JLA":
            JLA2_dist.append(number)           
          elif plot == "LBW":
            LBW2_dist.append(number)
        if block == "block3":
          if plot == "KKH":
            KKH3_dist.append(number)           
          elif plot == "NRV":
            NRV3_dist.append(number)           
          elif plot == "CCR":
            CCR3_dist.append(number)           
          elif plot == "CLF":
            CLF3_dist.append(number)           
          elif plot == "JLA":
            JLA3_dist.append(number)           
          elif plot == "LBW":
            LBW3_dist.append(number)


for date in data_dict.keys():

  for block in data_dict[date].keys():

    for plot in data_dict[date][block].keys():

      if plot == "KKH":
        mwmt_rank = "1" ##   23.0
      elif plot == "NRV":
        mwmt_rank = "4" ##  31.4
      elif plot == "CCR":
        mwmt_rank = "5" ## 33.9
      elif plot == "CLF":
        mwmt_rank = "3" ## 27.2
      elif plot == "JLA":
        mwmt_rank = "2" ## 25.3
      elif plot == "LBW":
        mwmt_rank = "6" ## 34.6
      else:
        print("check out the if elif loop...")

      mwmt_rank_dict[mwmt_rank] = plot_dif
      
      if plot == "KKH":
        mwmt_rank_dict[mwmt_rank] = KKH_dist 
      elif plot == "NRV":
        mwmt_rank_dict[mwmt_rank] = NRV_dist 
      elif plot == "CCR":
        mwmt_rank_dict[mwmt_rank] = CCR_dist 
      elif plot == "CLF":
        mwmt_rank_dict[mwmt_rank] = CLF_dist 
      elif plot == "JLA":
        mwmt_rank_dict[mwmt_rank] = JLA_dist 
      elif plot == "LBW":
        mwmt_rank_dict[mwmt_rank] = LBW_dist 

      if block == "block2":
        if plot == "KKH":
          block2_mwmt_rank_dict[mwmt_rank] = KKH2_dist 
        elif plot == "NRV":
          block2_mwmt_rank_dict[mwmt_rank] = NRV2_dist 
        elif plot == "CCR":
          block2_mwmt_rank_dict[mwmt_rank] = CCR2_dist 
        elif plot == "CLF":
          block2_mwmt_rank_dict[mwmt_rank] = CLF2_dist 
        elif plot == "JLA":
          block2_mwmt_rank_dict[mwmt_rank] = JLA2_dist 
        elif plot == "LBW":
          block2_mwmt_rank_dict[mwmt_rank] = LBW2_dist 
      if block == "block3":
        if plot == "KKH":
          block3_mwmt_rank_dict[mwmt_rank] = KKH3_dist 
        elif plot == "NRV":
          block3_mwmt_rank_dict[mwmt_rank] = NRV3_dist 
        elif plot == "CCR":
          block3_mwmt_rank_dict[mwmt_rank] = CCR3_dist 
        elif plot == "CLF":
          block3_mwmt_rank_dict[mwmt_rank] = CLF3_dist 
        elif plot == "JLA":
          block3_mwmt_rank_dict[mwmt_rank] = JLA3_dist 
        elif plot == "LBW":
          block3_mwmt_rank_dict[mwmt_rank] = LBW3_dist

KKH = mwmt_rank_dict["1"]
NRV = mwmt_rank_dict["4"]
CCR = mwmt_rank_dict["5"]
CLF = mwmt_rank_dict["3"]
JLA = mwmt_rank_dict["2"]
LBW = mwmt_rank_dict["6"]

data = [KKH, JLA, CLF, NRV, CCR, LBW]
labels = ["KKH -- 23.0ÂºC", "JLA -- 25.3ÂºC", "CLF -- 27.2ÂºC", "NRV -- 31.4ÂºC", "CCR -- 33.9ÂºC", "LBW -- 34.6ÂºC"]

fig = plt.figure(figsize =(10, 7))
 
# Creating axes instance
ax = fig.add_axes([0, 0, 1, 1])
 
# Creating plot
ax.boxplot(data, showfliers = False, labels = labels, whis = (10,90))
ax.set_xlabel("Mean Warmest Monthly Temperature")
ax.set_ylabel("Leaf Temperature Distribution (ÂºC)")
ax.set_title("Leaf temperature distribution by Mean Warmest Monthly Temperature")
ax.axhline(0, color='k', linestyle='dashed', linewidth=1)
 
# show plot
plt.show()

data_dict

# #####Same thing but do it by file percentile #######

# date_dict = {'200902': None, '200909': None, '200923': None, '201002': None, '201007': None, '201014': None, "201027": None, "201104": None, '201111': None}
# block_dict = {'200902': {"block2": None, "block3": None}, '200909': {"block2": None, "block3": None}, '200923': {"block2": None, "block3": None}, '201002': {"block2": None, "block3": None}, '201007': {"block2": None, "block3": None}, '201014': {"block2": None, "block3": None}, "201027": {"block2": None, "block3": None}, "201104": {"block2": None, "block3": None}, '201111': {"block2": None, "block3": None}}

# mwmt_rank_dict = {1: None, 2: None, 3: None, 4: None, 5: None, 6: None}
# block2_mwmt_rank_dict = {1: None, 2: None, 3: None, 4: None, 5: None, 6: None}
# block3_mwmt_rank_dict = {1: None, 2: None, 3: None, 4: None, 5: None, 6: None}

# KKH_dist = []
# NRV_dist = []
# CCR_dist = []
# CLF_dist = []
# JLA_dist = []
# LBW_dist = []

# KKH2_dist = []
# NRV2_dist = []
# CCR2_dist = []
# CLF2_dist = []
# JLA2_dist = []
# LBW2_dist = []

# KKH3_dist = []
# NRV3_dist = []
# CCR3_dist = []
# CLF3_dist = []
# JLA3_dist = []
# LBW3_dist = []

# #GET DATE AND DATE_BLOCK MEANS
# for date in data_dict.keys():
#   date_dist = []
#   for block in data_dict[date].keys():
#     block_dist = []
#     for plot in data_dict[date][block].keys():
#       for file1 in data_dict[date][block][plot].keys():
#         file_dist = []
#         for num in data_dict[date][block][plot][file1]:
#           # date_dist.append(num)
#           # block_dist.append(num)
#           file_dist.append(num)
#         file_np = np.array(file_dist)
#         file_perc = np.percentile(file_np, 50)
#         block_dist.append(file_perc)
#         date_dist.append(file_perc)
#     block_dict[date][block] = block_dist
#   date_dict[date] = date_dist

# #POPULATE THE LISTS ABOVE WITH DISTRIBUTIONS OF VALUES MINUS DATE OR DATE_BLOCK MEAN
# #CURRENTLY ON DATE MEAN -- HAVE TO CHANGE IF YOU WANT
# for date in data_dict.keys():

#   date_mean = np.array(date_dict[date]).mean()

#   for block in data_dict[date].keys():

#     date_block_mean = np.array(block_dict[date][block]).mean()

#     for plot in data_dict[date][block].keys():

#       plot_dist = []

#       for file1 in data_dict[date][block][plot].keys():
#         file_dist = []
#         for num in data_dict[date][block][plot][file1]:
#           # plot_dist.append(num)
#           file_dist.append(num)
#         file_np = np.array(file_dist)
#         file_perc = np.percentile(file_perc, 50)
#         file_norm = file_perc - date_block_mean
#         plot_dist.append(file_norm)

#       # plot_np = np.array(plot_dist)
#       # plot_perc = plot_np.
#       # plot_norm = plot_np - date_block_mean

#       for number in plot_dist:

#         if plot == "KKH":
#           KKH_dist.append(number)           
#         elif plot == "NRV":
#           NRV_dist.append(number)           
#         elif plot == "CCR":
#           CCR_dist.append(number)           
#         elif plot == "CLF":
#           CLF_dist.append(number)           
#         elif plot == "JLA":
#           JLA_dist.append(number)           
#         elif plot == "LBW":
#           LBW_dist.append(number)

#         if block == "block2":
#           if plot == "KKH":
#             KKH2_dist.append(number)           
#           elif plot == "NRV":
#             NRV2_dist.append(number)           
#           elif plot == "CCR":
#             CCR2_dist.append(number)           
#           elif plot == "CLF":
#             CLF2_dist.append(number)           
#           elif plot == "JLA":
#             JLA2_dist.append(number)           
#           elif plot == "LBW":
#             LBW2_dist.append(number)
#         if block == "block3":
#           if plot == "KKH":
#             KKH3_dist.append(number)           
#           elif plot == "NRV":
#             NRV3_dist.append(number)           
#           elif plot == "CCR":
#             CCR3_dist.append(number)           
#           elif plot == "CLF":
#             CLF3_dist.append(number)           
#           elif plot == "JLA":
#             JLA3_dist.append(number)           
#           elif plot == "LBW":
#             LBW3_dist.append(number)


# for date in data_dict.keys():

#   for block in data_dict[date].keys():

#     for plot in data_dict[date][block].keys():

#       if plot == "KKH":
#         mwmt_rank = "1" ##   23.0
#       elif plot == "NRV":
#         mwmt_rank = "4" ##  31.4
#       elif plot == "CCR":
#         mwmt_rank = "5" ## 33.9
#       elif plot == "CLF":
#         mwmt_rank = "3" ## 27.2
#       elif plot == "JLA":
#         mwmt_rank = "2" ## 25.3
#       elif plot == "LBW":
#         mwmt_rank = "6" ## 34.6
#       else:
#         print("check out the if elif loop...")

#       # mwmt_rank_dict[mwmt_rank] = plot_dif
      
#       if plot == "KKH":
#         mwmt_rank_dict[mwmt_rank] = KKH_dist 
#       elif plot == "NRV":
#         mwmt_rank_dict[mwmt_rank] = NRV_dist 
#       elif plot == "CCR":
#         mwmt_rank_dict[mwmt_rank] = CCR_dist 
#       elif plot == "CLF":
#         mwmt_rank_dict[mwmt_rank] = CLF_dist 
#       elif plot == "JLA":
#         mwmt_rank_dict[mwmt_rank] = JLA_dist 
#       elif plot == "LBW":
#         mwmt_rank_dict[mwmt_rank] = LBW_dist 

#       if block == "block2":
#         if plot == "KKH":
#           block2_mwmt_rank_dict[mwmt_rank] = KKH2_dist 
#         elif plot == "NRV":
#           block2_mwmt_rank_dict[mwmt_rank] = NRV2_dist 
#         elif plot == "CCR":
#           block2_mwmt_rank_dict[mwmt_rank] = CCR2_dist 
#         elif plot == "CLF":
#           block2_mwmt_rank_dict[mwmt_rank] = CLF2_dist 
#         elif plot == "JLA":
#           block2_mwmt_rank_dict[mwmt_rank] = JLA2_dist 
#         elif plot == "LBW":
#           block2_mwmt_rank_dict[mwmt_rank] = LBW2_dist 
#       if block == "block3":
#         if plot == "KKH":
#           block3_mwmt_rank_dict[mwmt_rank] = KKH3_dist 
#         elif plot == "NRV":
#           block3_mwmt_rank_dict[mwmt_rank] = NRV3_dist 
#         elif plot == "CCR":
#           block3_mwmt_rank_dict[mwmt_rank] = CCR3_dist 
#         elif plot == "CLF":
#           block3_mwmt_rank_dict[mwmt_rank] = CLF3_dist 
#         elif plot == "JLA":
#           block3_mwmt_rank_dict[mwmt_rank] = JLA3_dist 
#         elif plot == "LBW":
#           block3_mwmt_rank_dict[mwmt_rank] = LBW3_dist 

# KKH = mwmt_rank_dict["1"]
# NRV = mwmt_rank_dict["4"]
# CCR = mwmt_rank_dict["5"]
# CLF = mwmt_rank_dict["3"]
# JLA = mwmt_rank_dict["2"]
# LBW = mwmt_rank_dict["6"]

# data = [KKH, JLA, CLF, NRV, CCR, LBW]
# labels = ["KKH -- 23.0ÂºC", "JLA -- 25.3ÂºC", "CLF -- 27.2ÂºC", "NRV -- 31.4ÂºC", "CCR -- 33.9ÂºC", "LBW -- 34.6ÂºC"]

# fig = plt.figure(figsize =(10, 7))
 
# # Creating axes instance
# ax = fig.add_axes([0, 0, 1, 1])
 
# # Creating plot
# ax.boxplot(data, showfliers = False, labels = labels, whis = (10,90))
# ax.set_xlabel("Mean Warmest Monthly Temperature")
# ax.set_ylabel("Leaf Temperature Distribution (ÂºC)")
# ax.set_title("Leaf temperature distribution by Mean Warmest Monthly Temperature")
# ax.axhline(0, color='k', linestyle='dashed', linewidth=1)
 
# # show plot
# plt.show()







# dates = []
# block2warmkurt = []
# block2coolkurt = []
# block3warmkurt = []
# block3coolkurt = []

# num = 1
# for date in warm_cool_dict.keys():
#   dates.append(num)
#   for block in warm_cool_dict[date].keys():
#     for adaptation in warm_cool_dict[date][block].keys():
#       values = warm_cool_dict[date][block][adaptation]
#       values = np.array(values)
#       kurt = kurtosis(values)

#       if block == "block2":
#         if adaptation == "warm":
#           block2warmkurt.append(kurt)
#         elif adaptation == "cool":
#           block2coolkurt.append(kurt)
#       else:
#         if adaptation == "warm":
#           block3warmkurt.append(kurt)
#         elif adaptation == "cool":
#           block3coolkurt.append(kurt)
#   num += 1

# dates = pd.DataFrame(dates)

# plt.bar(x = dates.index + 0.3, height = block2warmkurt, width = 0.2, label = "warm2kurt")
# plt.bar(x = dates.index + 0.1, height = block2coolkurt, width = 0.2, label = "cool2kurt")
# plt.bar(x = dates.index - 0.1, height = block3warmkurt, width = 0.2, label = "warm3kurt")
# plt.bar(x = dates.index - 0.3, height = block3coolkurt, width = 0.2, label = "cool3kurt")
# plt.legend()

# cool2_np = np.array(block2_cool_dist)
# warm2_np = np.array(block2_warm_dist)
# cool3_np = np.array(block3_cool_dist)
# warm3_np = np.array(block3_warm_dist)

# warm_overall_np = np.array(overall_warm_dist)
# cool_overall_np = np.array(overall_cool_dist)



# perc = 90
# warm_perc = np.percentile(warm_overall_np, perc)
# cool_perc = np.percentile(cool_overall_np, perc)
# print("{}th percentile leaf temp of warm-adapted ecotype (compared to block mean leaf temp): {:.2f}ÂºC".format(perc, warm_perc))
# print("{}th percentile leaf temp of cool-adapted ecotype (compared to block mean leaf temp): {:.2f}ÂºC".format(perc, cool_perc))
# print("Difference in temp: {:.2f}ÂºC".format(cool_perc - warm_perc))

# plt.bar(x = ["warm", "cool"], height = [warm_perc, cool_perc], yerr = [warm_overall_np.std(), cool_overall_np.std()])
# plt.show()

# all_numbers = []
# date_dict = {'200902': None, '200909': None, '200923': None, '201002': None, '201007': None, '201014': None, "201027": None, "201104": None, '201111': None}
# block_dict = {"block2": {"JLA": None, "CCR": None,  "CLF": None , "KKH": None, "LBW": None, "NRV": None, "JLV": None}, "block3": {"JLA": None, "CCR": None,  "CLF": None , "KKH": None, "LBW": None, "NRV": None, "JLV": None}}
# plot_dict = {"JLA": None, "CCR": None,  "CLF": None , "KKH": None, "LBW": None, "NRV": None, "JLV": None}
# name_list = ["JLA","CCR","CLF","KKH","LBW","NRV","JLV"]
# date_list = ['200902','200909','200923','201002','201007','201014',"201027","201104",'201111']
# warm_cool_dict = {'200902': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '200909': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '200923': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '201002': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '201007': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '201014': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, "201027": {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, "201104": {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}, '201111': {"block2": {"cool": None, "warm": None}, "block3": {"cool": None, "warm": None}}}

# hist_dict = date_dict.copy()

# for date in date_dict.keys():
#   date_dict[date] = block_dict

# pic_list = []
# name_list = []
# for date in warm_cool_dict.keys():
#   for block in warm_cool_dict[date].keys():
#     for adaptation in warm_cool_dict[date][block].keys():
#       pic_list.append(warm_cool_dict[date][block][adaptation])
#       name_list.append(str(str(date)+str(block)+str(adaptation)))
# length = len(pic_list)

# fig, axs = plt.subplots(nrows=length, ncols=1, figsize=(8, 300))
# plt.subplots_adjust(hspace=0.5)
# fig.suptitle("hists", fontsize=40, y=0.95)

# num = 0
# for pic, ax, name in zip(pic_list, axs.ravel(), name_list):

#   ax.hist(pic, bins = 100, range = (10, 70))
#   ax.set_title(name)

# plt.show()

# pic_list = []
# name_list = []
# for date in date_dict.keys():
#   for block in date_dict[date].keys():
#     for plot in date_dict[date][block].keys():
#       pic_list.append(date_dict[date][block][plot])
#       name_list.append(str(str(date)+str(block)+str(plot)))
# length = len(pic_list)

# fig, axs = plt.subplots(nrows=length, ncols=1, figsize=(8, 300))
# plt.subplots_adjust(hspace=0.5)
# fig.suptitle("hists", fontsize=40, y=0.95)

# num = 0
# for pic, ax, name in zip(pic_list, axs.ravel(), name_list):

#   ax.hist(pic, bins = 100, range = (10, 70))
#   ax.set_title(name)

# plt.show()











# print(plot_charts_by_adaptation_median(data_dict, 50))

# dir = '/content/drive/MyDrive/Drone processing/Thermal/'
# rows = []
# for date in data_dict.keys():
#   for block in data_dict[date].keys():
#     for plot in data_dict[date][block].keys():
#       for file1 in data_dict[date][block][plot].keys():
#         value_array = data_dict[date][block][plot][file1]
#         row = [date, block, plot, file1, value_array]
#         rows.append(row)
# big_df = pd.DataFrame(rows, columns = ["date_col", "block", "plot", "file", "value_array"])

# big_df.to_csv("test")

# dir = '/content/drive/MyDrive/Drone processingtest'
# test = pd.read_csv(dir)

# test = test.iloc[: , 1:]
# data_dict = test.to_dict()
# data_dict

# dir = '/content/drive/MyDrive/Drone processing/Thermal/8_26_22_delete_leafless/200909/block2/KKH/'

# rgb_dict, thermal_dict, name_list = create_dict(dir)

# thermal_pixel_value_dict, pic_list = extract_leaf_thermal(rgb_dict, thermal_dict)

# length = len(pic_list)

# # define subplot grid
# fig, axs = plt.subplots(nrows=length, ncols=1, figsize=((40, 100)))
# plt.subplots_adjust(hspace=0.5)
# fig.suptitle("masked images", fontsize=18, y=0.95)

# # loop through array_dict keys and values, and axes
# for pic, ax in zip(pic_list, axs.ravel()):

#   ax.imshow(pic)

# plt.show()

